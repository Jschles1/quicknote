import * as React from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useForm } from 'react-hook-form';
import { Star } from 'lucide-react';
import { api } from '../utils/api';
import { NextPageWithLayout } from './_app';
import AppLayout from '@/components/AppLayout';
import TextEditor from '@/components/ui/TextEditor';
import { Separator } from '@/components/ui/Separator';
import { Input } from '@/components/ui/Input';
import { Button } from '@/components/ui/Button';
import { cn, decodeHtml } from '@/lib/util';

const CreateNotePage: NextPageWithLayout = () => {
    const router = useRouter();

    const {
        register,
        handleSubmit,
        watch,
        setValue,
        setError,
        clearErrors,
        formState: { errors, isSubmitted },
        getValues,
    } = useForm({ defaultValues: { name: '', content: '', category: '', starred: false } });

    // Used for calculating editor height
    const containerRef = React.useRef<HTMLDivElement>(null);
    const titleRef = React.useRef<HTMLDivElement>(null);
    const inputContainerRef = React.useRef<HTMLDivElement>(null);
    const [editorHeight, setEditorHeight] = React.useState('auto');
    const parentPadding = 16;
    const separatorHeight = 25;
    const initialEditorHeight = 84;
    const nameErrorHeight = errors.name ? 28 : 0;
    const categoryErrorHeight = errors.category ? 28 : 0;
    const contentErrorHeight = errors.content ? 28 : 0;

    // Custom handleSubmit to extend functionality to text editor
    const onSubmit = () => {
        clearErrors();
        const values = getValues();
        let isValid = true;
        if (!values.category) {
            setError('category', {
                type: 'manual',
                message: 'Please enter a category.',
            });
            isValid = false;
        }
        if (!values.name) {
            setError('name', {
                type: 'manual',
                message: 'Please enter a name.',
            });
            isValid = false;
        }
        if (!decodeHtml(values.content)) {
            setError('content', {
                type: 'manual',
                message: 'Please enter some content.',
            });
            isValid = false;
        }
        if (isValid) {
            console.log('Submitting');
            // TODO: Mutation
        }
    };

    const handleStarClick = () => {
        console.log('Star Clicked');
        const starred = getValues('starred');
        setValue('starred', !starred);
    };

    const handleEditorChange = (content: string) => {
        console.log('Editor Change', content);
        setValue('content', content);
    };

    const isStarred = watch('starred');

    const errorInputClass = 'border-red-500';
    console.log({ errors });

    React.useEffect(() => {
        if (containerRef.current && titleRef.current && inputContainerRef.current) {
            const containerHeight = containerRef.current.getBoundingClientRect().height;
            const titleHeight = titleRef.current.getBoundingClientRect().height;
            const inputContainerHeight = inputContainerRef.current.getBoundingClientRect().height;
            setEditorHeight(
                `${
                    containerHeight -
                    titleHeight -
                    inputContainerHeight -
                    parentPadding -
                    separatorHeight -
                    initialEditorHeight -
                    nameErrorHeight -
                    categoryErrorHeight -
                    contentErrorHeight
                }px`
            );
        }
    }, [titleRef, containerRef, inputContainerRef, errors.name, errors.category]);

    return (
        <>
            <Head>
                <title>QuickNote - Create Note</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="w-full max-w-7xl flex-1 p-4" ref={containerRef}>
                <div className="flex items-center justify-between" ref={titleRef}>
                    <h1 className="text-2xl font-extrabold">Create Note:</h1>
                    <div className="space-between flex items-center">
                        <Star
                            role="button"
                            {...register('starred')}
                            size="1rem"
                            className={cn(
                                'mr-4 cursor-pointer',
                                isStarred ? 'fill-amber-500 hover:fill-none' : 'fill-none hover:fill-amber-500'
                            )}
                            onClick={handleStarClick}
                        />
                        <Button onClick={onSubmit}>Submit</Button>
                    </div>
                </div>

                <form className="flex flex-col">
                    <div ref={inputContainerRef}>
                        <div className="py-2 font-bold">Note Title:</div>
                        <Input
                            className={cn('h-12 py-2 px-3 text-2xl', errors.name && errorInputClass)}
                            {...register('name', { required: true })}
                            placeholder="Note Title"
                        />
                        {errors.name && <div className="mt-2 text-sm text-red-500">{errors.name.message}</div>}
                        <div className="py-2 font-bold">Note Category:</div>
                        <Input
                            className={cn('h-12 py-2 px-3 text-2xl', errors.category && errorInputClass)}
                            {...register('category', { required: true })}
                            placeholder="Note Category"
                        />
                        {errors.category && <div className="mt-2 text-sm text-red-500">{errors.category.message}</div>}
                    </div>
                    <Separator className="my-3" />
                    {errors.content && <div className="mb-2 text-sm text-red-500">{errors.content.message}</div>}
                    <TextEditor
                        mode="create"
                        height={editorHeight}
                        onChange={handleEditorChange}
                        error={errors?.content?.message}
                    />
                </form>
            </div>
        </>
    );
};

export default CreateNotePage;

CreateNotePage.getLayout = function getLayout(page) {
    return <AppLayout>{page}</AppLayout>;
};
