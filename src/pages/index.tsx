import Head from 'next/head';
import { useSession } from 'next-auth/react';
import { NextPageWithLayout } from './_app';
import AppLayout from '../components/AppLayout';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';
import { Note } from '@prisma/client';
import { Separator } from '@/components/ui/Separator';
import SearchAndFilter from '@/components/SearchAndFilter';
import CategoryNotes from '@/components/CategoryNotes';

type NotesByCategory = {
    category: string;
    notes: Note[];
};

const sortNotesByCategory = (notes: Note[]): NotesByCategory[] => {
    const notesByCategory: NotesByCategory[] = [];

    notes.forEach((note) => {
        const category = note.category;
        const existingCategory = notesByCategory.find((nbc) => nbc.category === category);

        if (existingCategory) {
            existingCategory.notes.push(note);
        } else {
            notesByCategory.push({
                category,
                notes: [note],
            });
        }
    });

    return notesByCategory;
};

const Home: NextPageWithLayout<{ notes: Note[] }> = ({ notes }) => {
    const session = useSession();
    if (!session) return null;

    console.log(session);
    console.log(sortNotesByCategory(notes));

    const allNotes = sortNotesByCategory(notes.filter((n) => !n.archived && !n.trash));
    const starredNotes = sortNotesByCategory(notes.filter((n) => n.starred && !n.archived && !n.trash));
    const archivedNotes = sortNotesByCategory(notes.filter((n) => n.archived));
    const trashNotes = sortNotesByCategory(notes.filter((n) => n.trash));

    return (
        <>
            <Head>
                <title>QuickNote - Home</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="flex w-full flex-1 flex-col">
                <div className="container mx-auto p-4 pb-0">
                    <h1 className="text-3xl font-extrabold text-black">Notes</h1>
                </div>
                <Tabs defaultValue="all" className="flex w-full flex-1 flex-col">
                    <div className="container mx-auto flex items-center justify-between p-4">
                        <TabsList onChange={() => {}}>
                            <TabsTrigger value="all">All Notes</TabsTrigger>
                            <TabsTrigger value="starred">Starred</TabsTrigger>
                            <TabsTrigger value="archived">Archived</TabsTrigger>
                            <TabsTrigger value="trash">Trash</TabsTrigger>
                        </TabsList>
                    </div>

                    <SearchAndFilter />

                    <div className="flex-1 bg-slate-100">
                        <div className="container mx-auto h-full p-4">
                            <TabsContent value="all" className="mt-0 border-0 p-0">
                                {allNotes.map((notesByCategory) => (
                                    <CategoryNotes key={notesByCategory.category} data={notesByCategory} />
                                ))}
                            </TabsContent>
                            <TabsContent value="starred" className="mt-0 border-0 p-0">
                                {starredNotes.map((notesByCategory) => (
                                    <CategoryNotes key={notesByCategory.category} data={notesByCategory} />
                                ))}
                            </TabsContent>
                            <TabsContent value="archived" className="mt-0 border-0 p-0">
                                {archivedNotes.map((notesByCategory) => (
                                    <CategoryNotes key={notesByCategory.category} data={notesByCategory} />
                                ))}
                            </TabsContent>
                            <TabsContent value="trash" className="mt-0 border-0 p-0">
                                {trashNotes.map((notesByCategory) => (
                                    <CategoryNotes key={notesByCategory.category} data={notesByCategory} />
                                ))}
                            </TabsContent>
                        </div>
                    </div>
                </Tabs>
            </div>
        </>
    );
};

export default Home;

Home.getLayout = function getLayout(page) {
    return <AppLayout>{page}</AppLayout>;
};
